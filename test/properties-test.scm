;;; This file is part of Integer Sequences, a library for recreational
;;; number theory in MIT Scheme.
;;; Copyright 2007-2009 Alexey Radul.
;;;
;;; Integer Sequences is free software; you can redistribute it and/or
;;; modify it under the terms of the GNU Affero General Public License
;;; as published by the Free Software Foundation; either version 3 of
;;; the License, or (at your option) any later version.
;;; 
;;; This code is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; 
;;; You should have received a copy of the GNU Affero General Public
;;; License along with Integer Sequences; if not, see
;;; <http://www.gnu.org/licenses/>.

(declare (usual-integrations))

(in-test-group
 properties

 (define-each-test
  (assert-equal 4 (increment 3))
  (assert-equal 2 (decrement 3))
  (assert-equal 6 (double 3))
  (assert-equal 12 (triple 4))
  (assert-equal 5 (halve 10))
  (assert-equal 10 (sum '(1 2 3 4)))
  (assert-equal 24 (product '(1 2 3 4)))
  (assert-equal 24 (factorial 4))
  (assert-true  (factorial? 24))
  (assert-false (factorial? 25))
  (assert-equal '(1 2 6 24) (stream->list 4 (the-factorials)))
  (assert-equal 10 (choose 2 5))
  (assert-equal 55 (fibonacci 10))
  (assert-true  (fibonacci? 55))
  (assert-false (fibonacci? 70))
  (assert-equal -55 (fibonacci -10))
  (assert-equal 34 (fibonacci -9))

  (assert-equal 2 (smallest-divisor 6))
  (assert-equal 5 (smallest-divisor 175))
  (assert-true  (prime? 17))
  (assert-false (prime? 16))
  (assert-equal 11 (prime 5))
  (assert-false (composite? 17))
  (assert-true  (composite? 16))
  (assert-true  (coprime? 6 35))
  (assert-false (coprime? 6 10))
  (assert-equal 2 (euler-phi 6))
  (assert-true  (semiprime? 10))
  (assert-false (semiprime? 7))
  (assert-false (semiprime? 175))
  (assert-true  (square-free? 6))
  (assert-false (square-free? 12))
  (assert-equal '(5 5 7) (prime-factors 175))
  (assert-equal '(1 2 3 4 5 6 10 12 15 20 30 60) (divisors 60))
  (assert-equal '(1 2 4 5 10 20 25 50 100) (divisors 100))
  (assert-equal '(1 2 3 4 5 6 10 12 15 20 30) (proper-divisors 60))
  (assert-equal '(1) (proper-divisors 101))
  (assert-equal 108 (sigma 60))
  (assert-true  (perfect? 6))
  (assert-true  (perfect? 28))
  (assert-false (perfect? 27))
  (assert-equal '(6 28 496) (stream->list 3 (the-perfects)))
  (assert-true  (abundant? 60))
  (assert-false (abundant? 7))
  (assert-false (abundant? 6))
  (assert-equal '(12 18 20 24) (stream->list 4 (the-abundants)))
  (assert-false (deficient? 60))
  (assert-true  (deficient? 7))
  (assert-false (deficient? 6))
  (assert-equal 25 (deficient 20))
  (assert-true  (amicable? 220))
  (assert-false (amicable? 221))
  (assert-false (amicable? 1))
  (assert-equal '(220 284) (stream->list 2 (the-amicables)))
  (assert-true  (aspiring? 25))
  (assert-false (aspiring? 26))
  (assert-false (aspiring? 276)) ; Well, we don't really know...
  (assert-equal '(25 95 119 143) (stream->list 4 (the-aspirings)))
  (assert-equal 2047 (mersenne 5))
  (assert-true  (mersenne? 2047))
  (assert-false (mersenne? 2000))
  (assert-equal 2310 (primorial 5))
  (assert-true  (primorial? 2310))
  (assert-false (primorial? 2000))
  (assert-equal 17280 (compositorial 5))
  (assert-true  (compositorial? 17280))
  (assert-false (compositorial? 17000))

  (assert-equal 3 (integer-log 3 27))
  (assert-<     3 (integer-log 3 28))
  (assert->     4 (integer-log 3 28))
  (assert-true  (power-of? 3 27))
  (assert-false (power-of? 2 27))

  (assert-equal 36 (square 6))
  (assert-true  (square? 36))
  (assert-false (square? 35))
  (assert-equal 27 (cube 3))
  (assert-true  (cube? 27))
  (assert-false (cube? 26))
  (assert-equal 15 (triangle 5))
  (assert-true  (triangle? 15))
  (assert-false (triangle? 20))
  (assert-true  (triangle? 21))
  (assert-equal 5 (triangle-root 15))
  (assert-<     5 (triangle-root 16))
  (assert->     6 (triangle-root 16))
  (assert-equal 5 (count-triangles 3 25))
  (assert-equal '(1 3 6 10 15) (stream->list 5 (the-triangles)))
  (assert-equal '(10 15 21 28 36) (stream->list 5 (triangles-from 10)))
  (assert-equal '(15 10 6 3 1) (stream->list (triangles-down-from 15)))
  (assert-equal '(10 15 21 28 36) (stream->list (triangles-between 9 37)))
  (assert-equal '(36 28 21 15 10) (stream->list (triangles-between-down 9 37)))
  ;; TODO Other figurate numbers

  (assert-equal '(1 2 3 4) (number->digits 1234))
  (assert-equal '(1 0 1) (number->bits 5))
  (assert-equal 1234 (digits->number '(1 2 3 4)))
  (assert-true  (pandigital? 1234567890))
  (assert-false (pandigital? 3257454))
  (assert-equal 3 (bitcount 7))
  (assert-true  (evil? 6))
  (assert-false (evil? 7))
  (assert-true  (odious? 7))
  (assert-false (odious? 6))
  (assert-true  (multidigit? 23))
  (assert-false (multidigit? 5))
  (assert-true  (palindrome? 1))
  (assert-true  (palindrome? 55))
  (assert-true  (palindrome? 141))
  (assert-false (palindrome? 142))
  (assert-true  (emirp? 17))
  (assert-true  (emirp? 71))
  (assert-false (emirp? 53))
  (assert-true  (emirpimes? 15))
  (assert-true  (emirpimes? 51))
  (assert-false (emirpimes? 17))
  (assert-false (emirpimes? 91))
  (assert-true  (strobogrammatic? 619))
  (assert-false (strobogrammatic? 99))
  (assert-true  (apocalyptic-power? 157))
  (assert-false (apocalyptic-power? 158))
  (assert-true  (smith? 22))
  (assert-false (smith? 21))
  (assert-true  (hoax? 22))
  (assert-false (hoax? 21))
  (assert-equal 111 (repunit 3))
  (assert-true  (repunit? 111))
  (assert-false (repunit? 112))
  (assert-equal '(1 11 111 1111) (stream->list 4 (the-repunits)))
  (assert-true  (repdigit? 444))
  (assert-false (repdigit? 454))
  (assert-true  (undulating? 343434))
  (assert-false (undulating? 343437))
  (assert-equal '(101 111 121) (stream->list 3 (the-undulatings)))

  (assert-equal '("one" "thousand" "two" "hundred" "fifteen")
		(number->words 1215))
  (assert-equal 28 (letter-count 1215))
  (assert-equal "MCCXV" (number->roman-numerals 1215))))
